{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\nvar _domFns = require(\"./utils/domFns\");\nvar _positionFns = require(\"./utils/positionFns\");\nvar _shims = require(\"./utils/shims\");\nvar _log = _interopRequireDefault(require(\"./utils/log\"));\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\nfunction _interopRequireWildcard(e, t) {\n  if (\"function\" == typeof WeakMap) var r = new WeakMap(),\n    n = new WeakMap();\n  return (_interopRequireWildcard = function (e, t) {\n    if (!t && e && e.__esModule) return e;\n    var o,\n      i,\n      f = {\n        __proto__: null,\n        default: e\n      };\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f;\n    if (o = t ? n : r) {\n      if (o.has(e)) return o.get(e);\n      o.set(e, f);\n    }\n    for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]);\n    return f;\n  })(e, t);\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n/*:: import type {EventHandler, MouseTouchEvent} from './utils/types';*/\n/*:: import type {Element as ReactElement} from 'react';*/\n// Simple abstraction for dragging events names.\nconst eventsFor = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend'\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup'\n  }\n};\n\n// Default to mouse events.\nlet dragEventFor = eventsFor.mouse;\n/*:: export type DraggableData = {\n  node: HTMLElement,\n  x: number, y: number,\n  deltaX: number, deltaY: number,\n  lastX: number, lastY: number,\n};*/\n/*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void | false;*/\n/*:: export type ControlPosition = {x: number, y: number};*/\n/*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/\n/*:: export type DraggableCoreDefaultProps = {\n  allowAnyClick: boolean,\n  allowMobileScroll: boolean,\n  disabled: boolean,\n  enableUserSelectHack: boolean,\n  onStart: DraggableEventHandler,\n  onDrag: DraggableEventHandler,\n  onStop: DraggableEventHandler,\n  onMouseDown: (e: MouseEvent) => void,\n  scale: number,\n};*/\n/*:: export type DraggableCoreProps = {\n  ...DraggableCoreDefaultProps,\n  cancel: string,\n  children: ReactElement<any>,\n  offsetParent: HTMLElement,\n  grid: [number, number],\n  handle: string,\n  nodeRef?: ?React.ElementRef<any>,\n};*/\n//\n// Define <DraggableCore>.\n//\n// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can\n// work well with libraries that require more control over the element.\n//\n\nclass DraggableCore extends React.Component /*:: <DraggableCoreProps>*/ {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"dragging\", false);\n    // Used while dragging to determine deltas.\n    _defineProperty(this, \"lastX\", NaN);\n    _defineProperty(this, \"lastY\", NaN);\n    _defineProperty(this, \"touchIdentifier\", null);\n    _defineProperty(this, \"mounted\", false);\n    _defineProperty(this, \"handleDragStart\", e => {\n      // Make it possible to attach event handlers on top of this one.\n      this.props.onMouseDown(e);\n\n      // Only accept left-clicks.\n      if (!this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false;\n\n      // Get nodes. Be sure to grab relative document (could be iframed)\n      const thisNode = this.findDOMNode();\n      if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {\n        throw new Error('<DraggableCore> not mounted on DragStart!');\n      }\n      const {\n        ownerDocument\n      } = thisNode;\n\n      // Short circuit if handle or cancel prop was provided and selector doesn't match.\n      if (this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.handle, thisNode) || this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.cancel, thisNode)) {\n        return;\n      }\n\n      // Prevent scrolling on mobile devices, like ipad/iphone.\n      // Important that this is after handle/cancel.\n      if (e.type === 'touchstart' && !this.props.allowMobileScroll) e.preventDefault();\n\n      // Set touch identifier in component state if this is a touch event. This allows us to\n      // distinguish between individual touches on multitouch screens by identifying which\n      // touchpoint was set to this element.\n      const touchIdentifier = (0, _domFns.getTouchIdentifier)(e);\n      this.touchIdentifier = touchIdentifier;\n\n      // Get the current drag point from the event. This is used as the offset.\n      const position = (0, _positionFns.getControlPosition)(e, touchIdentifier, this);\n      if (position == null) return; // not possible but satisfies flow\n      const {\n        x,\n        y\n      } = position;\n\n      // Create an event object with all the data parents need to make a decision here.\n      const coreEvent = (0, _positionFns.createCoreData)(this, x, y);\n      (0, _log.default)('DraggableCore: handleDragStart: %j', coreEvent);\n\n      // Call event handler. If it returns explicit false, cancel.\n      (0, _log.default)('calling', this.props.onStart);\n      const shouldUpdate = this.props.onStart(e, coreEvent);\n      if (shouldUpdate === false || this.mounted === false) return;\n\n      // Add a style to the body to disable user-select. This prevents text from\n      // being selected all over the page.\n      if (this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument);\n\n      // Initiate dragging. Set the current x and y as offsets\n      // so we know how much we've moved during the drag. This allows us\n      // to drag elements around even if they have been moved, without issue.\n      this.dragging = true;\n      this.lastX = x;\n      this.lastY = y;\n\n      // Add events to the document directly so we catch when the user's mouse/touch moves outside of\n      // this element. We use different events depending on whether or not we have detected that this\n      // is a touch-capable device.\n      (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, this.handleDrag);\n      (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, this.handleDragStop);\n    });\n    _defineProperty(this, \"handleDrag\", e => {\n      // Get the current drag point from the event. This is used as the offset.\n      const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);\n      if (position == null) return;\n      let {\n        x,\n        y\n      } = position;\n\n      // Snap to grid if prop has been provided\n      if (Array.isArray(this.props.grid)) {\n        let deltaX = x - this.lastX,\n          deltaY = y - this.lastY;\n        [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);\n        if (!deltaX && !deltaY) return; // skip useless drag\n        x = this.lastX + deltaX, y = this.lastY + deltaY;\n      }\n      const coreEvent = (0, _positionFns.createCoreData)(this, x, y);\n      (0, _log.default)('DraggableCore: handleDrag: %j', coreEvent);\n\n      // Call event handler. If it returns explicit false, trigger end.\n      const shouldUpdate = this.props.onDrag(e, coreEvent);\n      if (shouldUpdate === false || this.mounted === false) {\n        try {\n          // $FlowIgnore\n          this.handleDragStop(new MouseEvent('mouseup'));\n        } catch (err) {\n          // Old browsers\n          const event = document.createEvent('MouseEvents') /*: any*/ /*: MouseTouchEvent*/;\n          // I see why this insanity was deprecated\n          // $FlowIgnore\n          event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n          this.handleDragStop(event);\n        }\n        return;\n      }\n      this.lastX = x;\n      this.lastY = y;\n    });\n    _defineProperty(this, \"handleDragStop\", e => {\n      if (!this.dragging) return;\n      const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);\n      if (position == null) return;\n      let {\n        x,\n        y\n      } = position;\n\n      // Snap to grid if prop has been provided\n      if (Array.isArray(this.props.grid)) {\n        let deltaX = x - this.lastX || 0;\n        let deltaY = y - this.lastY || 0;\n        [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);\n        x = this.lastX + deltaX, y = this.lastY + deltaY;\n      }\n      const coreEvent = (0, _positionFns.createCoreData)(this, x, y);\n\n      // Call event handler\n      const shouldContinue = this.props.onStop(e, coreEvent);\n      if (shouldContinue === false || this.mounted === false) return false;\n      const thisNode = this.findDOMNode();\n      if (thisNode) {\n        // Remove user-select hack\n        if (this.props.enableUserSelectHack) (0, _domFns.scheduleRemoveUserSelectStyles)(thisNode.ownerDocument);\n      }\n      (0, _log.default)('DraggableCore: handleDragStop: %j', coreEvent);\n\n      // Reset the el.\n      this.dragging = false;\n      this.lastX = NaN;\n      this.lastY = NaN;\n      if (thisNode) {\n        // Remove event handlers\n        (0, _log.default)('DraggableCore: Removing handlers');\n        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, this.handleDrag);\n        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, this.handleDragStop);\n      }\n    });\n    _defineProperty(this, \"onMouseDown\", e => {\n      dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse\n\n      return this.handleDragStart(e);\n    });\n    _defineProperty(this, \"onMouseUp\", e => {\n      dragEventFor = eventsFor.mouse;\n      return this.handleDragStop(e);\n    });\n    // Same as onMouseDown (start drag), but now consider this a touch device.\n    _defineProperty(this, \"onTouchStart\", e => {\n      // We're on a touch device now, so change the event handlers\n      dragEventFor = eventsFor.touch;\n      return this.handleDragStart(e);\n    });\n    _defineProperty(this, \"onTouchEnd\", e => {\n      // We're on a touch device now, so change the event handlers\n      dragEventFor = eventsFor.touch;\n      return this.handleDragStop(e);\n    });\n  }\n  componentDidMount() {\n    this.mounted = true;\n    // Touch handlers must be added with {passive: false} to be cancelable.\n    // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n    const thisNode = this.findDOMNode();\n    if (thisNode) {\n      (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {\n        passive: false\n      });\n    }\n  }\n  componentWillUnmount() {\n    this.mounted = false;\n    // Remove any leftover event handlers. Remove both touch and mouse handlers in case\n    // some browser quirk caused a touch event to fire during a mouse move, or vice versa.\n    const thisNode = this.findDOMNode();\n    if (thisNode) {\n      const {\n        ownerDocument\n      } = thisNode;\n      (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);\n      (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);\n      (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);\n      (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);\n      (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {\n        passive: false\n      });\n      if (this.props.enableUserSelectHack) (0, _domFns.scheduleRemoveUserSelectStyles)(ownerDocument);\n    }\n  }\n\n  // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find\n  // the underlying DOM node ourselves. See the README for more information.\n  findDOMNode() /*: ?HTMLElement*/{\n    return this.props?.nodeRef ? this.props?.nodeRef?.current : _reactDom.default.findDOMNode(this);\n  }\n  render() /*: React.Element<any>*/{\n    // Reuse the child provided\n    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n    return /*#__PURE__*/React.cloneElement(React.Children.only(this.props.children), {\n      // Note: mouseMove handler is attached to document so it will still function\n      // when the user drags quickly and leaves the bounds of the element.\n      onMouseDown: this.onMouseDown,\n      onMouseUp: this.onMouseUp,\n      // onTouchStart is added on `componentDidMount` so they can be added with\n      // {passive: false}, which allows it to cancel. See\n      // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n      onTouchEnd: this.onTouchEnd\n    });\n  }\n}\nexports.default = DraggableCore;\n_defineProperty(DraggableCore, \"displayName\", 'DraggableCore');\n_defineProperty(DraggableCore, \"propTypes\", {\n  /**\n   * `allowAnyClick` allows dragging using any mouse button.\n   * By default, we only accept the left button.\n   *\n   * Defaults to `false`.\n   */\n  allowAnyClick: _propTypes.default.bool,\n  /**\n   * `allowMobileScroll` turns off cancellation of the 'touchstart' event\n   * on mobile devices. Only enable this if you are having trouble with click\n   * events. Prefer using 'handle' / 'cancel' instead.\n   *\n   * Defaults to `false`.\n   */\n  allowMobileScroll: _propTypes.default.bool,\n  children: _propTypes.default.node.isRequired,\n  /**\n   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,\n   * with the exception of `onMouseDown`, will not fire.\n   */\n  disabled: _propTypes.default.bool,\n  /**\n   * By default, we add 'user-select:none' attributes to the document body\n   * to prevent ugly text selection during drag. If this is causing problems\n   * for your app, set this to `false`.\n   */\n  enableUserSelectHack: _propTypes.default.bool,\n  /**\n   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets\n   * instead of using the parent node.\n   */\n  offsetParent: function (props /*: DraggableCoreProps*/, propName /*: $Keys<DraggableCoreProps>*/) {\n    if (props[propName] && props[propName].nodeType !== 1) {\n      throw new Error('Draggable\\'s offsetParent must be a DOM Node.');\n    }\n  },\n  /**\n   * `grid` specifies the x and y that dragging should snap to.\n   */\n  grid: _propTypes.default.arrayOf(_propTypes.default.number),\n  /**\n   * `handle` specifies a selector to be used as the handle that initiates drag.\n   *\n   * Example:\n   *\n   * ```jsx\n   *   let App = React.createClass({\n   *       render: function () {\n   *         return (\n   *            <Draggable handle=\".handle\">\n   *              <div>\n   *                  <div className=\"handle\">Click me to drag</div>\n   *                  <div>This is some other content</div>\n   *              </div>\n   *           </Draggable>\n   *         );\n   *       }\n   *   });\n   * ```\n   */\n  handle: _propTypes.default.string,\n  /**\n   * `cancel` specifies a selector to be used to prevent drag initialization.\n   *\n   * Example:\n   *\n   * ```jsx\n   *   let App = React.createClass({\n   *       render: function () {\n   *           return(\n   *               <Draggable cancel=\".cancel\">\n   *                   <div>\n   *                     <div className=\"cancel\">You can't drag from here</div>\n   *                     <div>Dragging here works fine</div>\n   *                   </div>\n   *               </Draggable>\n   *           );\n   *       }\n   *   });\n   * ```\n   */\n  cancel: _propTypes.default.string,\n  /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.\n   * Unfortunately, in order for <Draggable> to work properly, we need raw access\n   * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`\n   * as in this example:\n   *\n   * function MyComponent() {\n   *   const nodeRef = React.useRef(null);\n   *   return (\n   *     <Draggable nodeRef={nodeRef}>\n   *       <div ref={nodeRef}>Example Target</div>\n   *     </Draggable>\n   *   );\n   * }\n   *\n   * This can be used for arbitrarily nested components, so long as the ref ends up\n   * pointing to the actual child DOM node and not a custom component.\n   */\n  nodeRef: _propTypes.default.object,\n  /**\n   * Called when dragging starts.\n   * If this function returns the boolean false, dragging will be canceled.\n   */\n  onStart: _propTypes.default.func,\n  /**\n   * Called while dragging.\n   * If this function returns the boolean false, dragging will be canceled.\n   */\n  onDrag: _propTypes.default.func,\n  /**\n   * Called when dragging stops.\n   * If this function returns the boolean false, the drag will remain active.\n   */\n  onStop: _propTypes.default.func,\n  /**\n   * A workaround option which can be passed if onMouseDown needs to be accessed,\n   * since it'll always be blocked (as there is internal use of onMouseDown)\n   */\n  onMouseDown: _propTypes.default.func,\n  /**\n   * `scale`, if set, applies scaling while dragging an element\n   */\n  scale: _propTypes.default.number,\n  /**\n   * These properties should be defined on the child, not here.\n   */\n  className: _shims.dontSetMe,\n  style: _shims.dontSetMe,\n  transform: _shims.dontSetMe\n});\n_defineProperty(DraggableCore, \"defaultProps\", {\n  allowAnyClick: false,\n  // by default only accept left click\n  allowMobileScroll: false,\n  disabled: false,\n  enableUserSelectHack: true,\n  onStart: function () {},\n  onDrag: function () {},\n  onStop: function () {},\n  onMouseDown: function () {},\n  scale: 1\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","default","React","_interopRequireWildcard","require","_propTypes","_interopRequireDefault","_reactDom","_domFns","_positionFns","_shims","_log","e","__esModule","t","WeakMap","r","n","o","i","f","__proto__","has","get","set","hasOwnProperty","call","getOwnPropertyDescriptor","_defineProperty","_toPropertyKey","enumerable","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","eventsFor","touch","start","move","stop","mouse","dragEventFor","DraggableCore","Component","constructor","arguments","NaN","props","onMouseDown","allowAnyClick","button","thisNode","findDOMNode","ownerDocument","body","Error","disabled","target","defaultView","Node","handle","matchesSelectorAndParentsTo","cancel","type","allowMobileScroll","preventDefault","touchIdentifier","getTouchIdentifier","position","getControlPosition","x","y","coreEvent","createCoreData","onStart","shouldUpdate","mounted","enableUserSelectHack","addUserSelectStyles","dragging","lastX","lastY","addEvent","handleDrag","handleDragStop","Array","isArray","grid","deltaX","deltaY","snapToGrid","onDrag","MouseEvent","err","event","document","createEvent","initMouseEvent","window","shouldContinue","onStop","scheduleRemoveUserSelectStyles","removeEvent","handleDragStart","componentDidMount","onTouchStart","passive","componentWillUnmount","nodeRef","current","render","cloneElement","Children","only","children","onMouseUp","onTouchEnd","bool","node","isRequired","offsetParent","propName","nodeType","arrayOf","number","string","object","func","scale","className","dontSetMe","style","transform"],"sources":["C:/Users/Asus/Downloads/plot-diagram-app/node_modules/react-draggable/build/cjs/DraggableCore.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\nvar _domFns = require(\"./utils/domFns\");\nvar _positionFns = require(\"./utils/positionFns\");\nvar _shims = require(\"./utils/shims\");\nvar _log = _interopRequireDefault(require(\"./utils/log\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/*:: import type {EventHandler, MouseTouchEvent} from './utils/types';*/\n/*:: import type {Element as ReactElement} from 'react';*/\n// Simple abstraction for dragging events names.\nconst eventsFor = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend'\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup'\n  }\n};\n\n// Default to mouse events.\nlet dragEventFor = eventsFor.mouse;\n/*:: export type DraggableData = {\n  node: HTMLElement,\n  x: number, y: number,\n  deltaX: number, deltaY: number,\n  lastX: number, lastY: number,\n};*/\n/*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void | false;*/\n/*:: export type ControlPosition = {x: number, y: number};*/\n/*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/\n/*:: export type DraggableCoreDefaultProps = {\n  allowAnyClick: boolean,\n  allowMobileScroll: boolean,\n  disabled: boolean,\n  enableUserSelectHack: boolean,\n  onStart: DraggableEventHandler,\n  onDrag: DraggableEventHandler,\n  onStop: DraggableEventHandler,\n  onMouseDown: (e: MouseEvent) => void,\n  scale: number,\n};*/\n/*:: export type DraggableCoreProps = {\n  ...DraggableCoreDefaultProps,\n  cancel: string,\n  children: ReactElement<any>,\n  offsetParent: HTMLElement,\n  grid: [number, number],\n  handle: string,\n  nodeRef?: ?React.ElementRef<any>,\n};*/\n//\n// Define <DraggableCore>.\n//\n// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can\n// work well with libraries that require more control over the element.\n//\n\nclass DraggableCore extends React.Component /*:: <DraggableCoreProps>*/{\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"dragging\", false);\n    // Used while dragging to determine deltas.\n    _defineProperty(this, \"lastX\", NaN);\n    _defineProperty(this, \"lastY\", NaN);\n    _defineProperty(this, \"touchIdentifier\", null);\n    _defineProperty(this, \"mounted\", false);\n    _defineProperty(this, \"handleDragStart\", e => {\n      // Make it possible to attach event handlers on top of this one.\n      this.props.onMouseDown(e);\n\n      // Only accept left-clicks.\n      if (!this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false;\n\n      // Get nodes. Be sure to grab relative document (could be iframed)\n      const thisNode = this.findDOMNode();\n      if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {\n        throw new Error('<DraggableCore> not mounted on DragStart!');\n      }\n      const {\n        ownerDocument\n      } = thisNode;\n\n      // Short circuit if handle or cancel prop was provided and selector doesn't match.\n      if (this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.handle, thisNode) || this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, this.props.cancel, thisNode)) {\n        return;\n      }\n\n      // Prevent scrolling on mobile devices, like ipad/iphone.\n      // Important that this is after handle/cancel.\n      if (e.type === 'touchstart' && !this.props.allowMobileScroll) e.preventDefault();\n\n      // Set touch identifier in component state if this is a touch event. This allows us to\n      // distinguish between individual touches on multitouch screens by identifying which\n      // touchpoint was set to this element.\n      const touchIdentifier = (0, _domFns.getTouchIdentifier)(e);\n      this.touchIdentifier = touchIdentifier;\n\n      // Get the current drag point from the event. This is used as the offset.\n      const position = (0, _positionFns.getControlPosition)(e, touchIdentifier, this);\n      if (position == null) return; // not possible but satisfies flow\n      const {\n        x,\n        y\n      } = position;\n\n      // Create an event object with all the data parents need to make a decision here.\n      const coreEvent = (0, _positionFns.createCoreData)(this, x, y);\n      (0, _log.default)('DraggableCore: handleDragStart: %j', coreEvent);\n\n      // Call event handler. If it returns explicit false, cancel.\n      (0, _log.default)('calling', this.props.onStart);\n      const shouldUpdate = this.props.onStart(e, coreEvent);\n      if (shouldUpdate === false || this.mounted === false) return;\n\n      // Add a style to the body to disable user-select. This prevents text from\n      // being selected all over the page.\n      if (this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument);\n\n      // Initiate dragging. Set the current x and y as offsets\n      // so we know how much we've moved during the drag. This allows us\n      // to drag elements around even if they have been moved, without issue.\n      this.dragging = true;\n      this.lastX = x;\n      this.lastY = y;\n\n      // Add events to the document directly so we catch when the user's mouse/touch moves outside of\n      // this element. We use different events depending on whether or not we have detected that this\n      // is a touch-capable device.\n      (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, this.handleDrag);\n      (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, this.handleDragStop);\n    });\n    _defineProperty(this, \"handleDrag\", e => {\n      // Get the current drag point from the event. This is used as the offset.\n      const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);\n      if (position == null) return;\n      let {\n        x,\n        y\n      } = position;\n\n      // Snap to grid if prop has been provided\n      if (Array.isArray(this.props.grid)) {\n        let deltaX = x - this.lastX,\n          deltaY = y - this.lastY;\n        [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);\n        if (!deltaX && !deltaY) return; // skip useless drag\n        x = this.lastX + deltaX, y = this.lastY + deltaY;\n      }\n      const coreEvent = (0, _positionFns.createCoreData)(this, x, y);\n      (0, _log.default)('DraggableCore: handleDrag: %j', coreEvent);\n\n      // Call event handler. If it returns explicit false, trigger end.\n      const shouldUpdate = this.props.onDrag(e, coreEvent);\n      if (shouldUpdate === false || this.mounted === false) {\n        try {\n          // $FlowIgnore\n          this.handleDragStop(new MouseEvent('mouseup'));\n        } catch (err) {\n          // Old browsers\n          const event = ((document.createEvent('MouseEvents') /*: any*/) /*: MouseTouchEvent*/);\n          // I see why this insanity was deprecated\n          // $FlowIgnore\n          event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n          this.handleDragStop(event);\n        }\n        return;\n      }\n      this.lastX = x;\n      this.lastY = y;\n    });\n    _defineProperty(this, \"handleDragStop\", e => {\n      if (!this.dragging) return;\n      const position = (0, _positionFns.getControlPosition)(e, this.touchIdentifier, this);\n      if (position == null) return;\n      let {\n        x,\n        y\n      } = position;\n\n      // Snap to grid if prop has been provided\n      if (Array.isArray(this.props.grid)) {\n        let deltaX = x - this.lastX || 0;\n        let deltaY = y - this.lastY || 0;\n        [deltaX, deltaY] = (0, _positionFns.snapToGrid)(this.props.grid, deltaX, deltaY);\n        x = this.lastX + deltaX, y = this.lastY + deltaY;\n      }\n      const coreEvent = (0, _positionFns.createCoreData)(this, x, y);\n\n      // Call event handler\n      const shouldContinue = this.props.onStop(e, coreEvent);\n      if (shouldContinue === false || this.mounted === false) return false;\n      const thisNode = this.findDOMNode();\n      if (thisNode) {\n        // Remove user-select hack\n        if (this.props.enableUserSelectHack) (0, _domFns.scheduleRemoveUserSelectStyles)(thisNode.ownerDocument);\n      }\n      (0, _log.default)('DraggableCore: handleDragStop: %j', coreEvent);\n\n      // Reset the el.\n      this.dragging = false;\n      this.lastX = NaN;\n      this.lastY = NaN;\n      if (thisNode) {\n        // Remove event handlers\n        (0, _log.default)('DraggableCore: Removing handlers');\n        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, this.handleDrag);\n        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, this.handleDragStop);\n      }\n    });\n    _defineProperty(this, \"onMouseDown\", e => {\n      dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse\n\n      return this.handleDragStart(e);\n    });\n    _defineProperty(this, \"onMouseUp\", e => {\n      dragEventFor = eventsFor.mouse;\n      return this.handleDragStop(e);\n    });\n    // Same as onMouseDown (start drag), but now consider this a touch device.\n    _defineProperty(this, \"onTouchStart\", e => {\n      // We're on a touch device now, so change the event handlers\n      dragEventFor = eventsFor.touch;\n      return this.handleDragStart(e);\n    });\n    _defineProperty(this, \"onTouchEnd\", e => {\n      // We're on a touch device now, so change the event handlers\n      dragEventFor = eventsFor.touch;\n      return this.handleDragStop(e);\n    });\n  }\n  componentDidMount() {\n    this.mounted = true;\n    // Touch handlers must be added with {passive: false} to be cancelable.\n    // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n    const thisNode = this.findDOMNode();\n    if (thisNode) {\n      (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {\n        passive: false\n      });\n    }\n  }\n  componentWillUnmount() {\n    this.mounted = false;\n    // Remove any leftover event handlers. Remove both touch and mouse handlers in case\n    // some browser quirk caused a touch event to fire during a mouse move, or vice versa.\n    const thisNode = this.findDOMNode();\n    if (thisNode) {\n      const {\n        ownerDocument\n      } = thisNode;\n      (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);\n      (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);\n      (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);\n      (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);\n      (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {\n        passive: false\n      });\n      if (this.props.enableUserSelectHack) (0, _domFns.scheduleRemoveUserSelectStyles)(ownerDocument);\n    }\n  }\n\n  // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find\n  // the underlying DOM node ourselves. See the README for more information.\n  findDOMNode() /*: ?HTMLElement*/{\n    return this.props?.nodeRef ? this.props?.nodeRef?.current : _reactDom.default.findDOMNode(this);\n  }\n  render() /*: React.Element<any>*/{\n    // Reuse the child provided\n    // This makes it flexible to use whatever element is wanted (div, ul, etc)\n    return /*#__PURE__*/React.cloneElement(React.Children.only(this.props.children), {\n      // Note: mouseMove handler is attached to document so it will still function\n      // when the user drags quickly and leaves the bounds of the element.\n      onMouseDown: this.onMouseDown,\n      onMouseUp: this.onMouseUp,\n      // onTouchStart is added on `componentDidMount` so they can be added with\n      // {passive: false}, which allows it to cancel. See\n      // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n      onTouchEnd: this.onTouchEnd\n    });\n  }\n}\nexports.default = DraggableCore;\n_defineProperty(DraggableCore, \"displayName\", 'DraggableCore');\n_defineProperty(DraggableCore, \"propTypes\", {\n  /**\n   * `allowAnyClick` allows dragging using any mouse button.\n   * By default, we only accept the left button.\n   *\n   * Defaults to `false`.\n   */\n  allowAnyClick: _propTypes.default.bool,\n  /**\n   * `allowMobileScroll` turns off cancellation of the 'touchstart' event\n   * on mobile devices. Only enable this if you are having trouble with click\n   * events. Prefer using 'handle' / 'cancel' instead.\n   *\n   * Defaults to `false`.\n   */\n  allowMobileScroll: _propTypes.default.bool,\n  children: _propTypes.default.node.isRequired,\n  /**\n   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,\n   * with the exception of `onMouseDown`, will not fire.\n   */\n  disabled: _propTypes.default.bool,\n  /**\n   * By default, we add 'user-select:none' attributes to the document body\n   * to prevent ugly text selection during drag. If this is causing problems\n   * for your app, set this to `false`.\n   */\n  enableUserSelectHack: _propTypes.default.bool,\n  /**\n   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets\n   * instead of using the parent node.\n   */\n  offsetParent: function (props /*: DraggableCoreProps*/, propName /*: $Keys<DraggableCoreProps>*/) {\n    if (props[propName] && props[propName].nodeType !== 1) {\n      throw new Error('Draggable\\'s offsetParent must be a DOM Node.');\n    }\n  },\n  /**\n   * `grid` specifies the x and y that dragging should snap to.\n   */\n  grid: _propTypes.default.arrayOf(_propTypes.default.number),\n  /**\n   * `handle` specifies a selector to be used as the handle that initiates drag.\n   *\n   * Example:\n   *\n   * ```jsx\n   *   let App = React.createClass({\n   *       render: function () {\n   *         return (\n   *            <Draggable handle=\".handle\">\n   *              <div>\n   *                  <div className=\"handle\">Click me to drag</div>\n   *                  <div>This is some other content</div>\n   *              </div>\n   *           </Draggable>\n   *         );\n   *       }\n   *   });\n   * ```\n   */\n  handle: _propTypes.default.string,\n  /**\n   * `cancel` specifies a selector to be used to prevent drag initialization.\n   *\n   * Example:\n   *\n   * ```jsx\n   *   let App = React.createClass({\n   *       render: function () {\n   *           return(\n   *               <Draggable cancel=\".cancel\">\n   *                   <div>\n   *                     <div className=\"cancel\">You can't drag from here</div>\n   *                     <div>Dragging here works fine</div>\n   *                   </div>\n   *               </Draggable>\n   *           );\n   *       }\n   *   });\n   * ```\n   */\n  cancel: _propTypes.default.string,\n  /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.\n   * Unfortunately, in order for <Draggable> to work properly, we need raw access\n   * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`\n   * as in this example:\n   *\n   * function MyComponent() {\n   *   const nodeRef = React.useRef(null);\n   *   return (\n   *     <Draggable nodeRef={nodeRef}>\n   *       <div ref={nodeRef}>Example Target</div>\n   *     </Draggable>\n   *   );\n   * }\n   *\n   * This can be used for arbitrarily nested components, so long as the ref ends up\n   * pointing to the actual child DOM node and not a custom component.\n   */\n  nodeRef: _propTypes.default.object,\n  /**\n   * Called when dragging starts.\n   * If this function returns the boolean false, dragging will be canceled.\n   */\n  onStart: _propTypes.default.func,\n  /**\n   * Called while dragging.\n   * If this function returns the boolean false, dragging will be canceled.\n   */\n  onDrag: _propTypes.default.func,\n  /**\n   * Called when dragging stops.\n   * If this function returns the boolean false, the drag will remain active.\n   */\n  onStop: _propTypes.default.func,\n  /**\n   * A workaround option which can be passed if onMouseDown needs to be accessed,\n   * since it'll always be blocked (as there is internal use of onMouseDown)\n   */\n  onMouseDown: _propTypes.default.func,\n  /**\n   * `scale`, if set, applies scaling while dragging an element\n   */\n  scale: _propTypes.default.number,\n  /**\n   * These properties should be defined on the child, not here.\n   */\n  className: _shims.dontSetMe,\n  style: _shims.dontSetMe,\n  transform: _shims.dontSetMe\n});\n_defineProperty(DraggableCore, \"defaultProps\", {\n  allowAnyClick: false,\n  // by default only accept left click\n  allowMobileScroll: false,\n  disabled: false,\n  enableUserSelectHack: true,\n  onStart: function () {},\n  onDrag: function () {},\n  onStop: function () {},\n  onMouseDown: function () {},\n  scale: 1\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}